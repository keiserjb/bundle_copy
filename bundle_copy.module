<?php

/**
 * @file
 * Bundle copy.
 */

/**
 * Implements hook_menu().
 */
function bundle_copy_menu() {
  $items = array();

  $items['admin/structure/types/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bundle_copy_export', 'node'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/types/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bundle_copy_import', 'node'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu callback: present the export page.
 */
function bundle_copy_export($form, &$form_state, $entity_type = 'node') {


  if (isset($form_state['step'])) {
    $step = $form_state['step'];
  }
  else {
    $step = 1;
    $form_state['step'] = $step;
  }

  switch ($step) {

    // Select the bundles.
    case 1:
      $bundles = _bundle_copy_bundle_info($entity_type, TRUE);

      $form['bundle-info'] = array(
        '#markup' => t('Select bundles you want to export.'),
      );
      $form['bundles'] = array(
        '#type' => 'tableselect',
        '#header' => array('label' => t('Bundle')),
        '#options' => $bundles,
        '#required' => TRUE,
        '#empty' => t('No bundles found.'),
      );

      $form['next'] = array(
        '#type' => 'submit',
        '#value' => t('Next'),
      );
      break;

    // List the fields / field groups.
    case 2:

      // Field group.
      $all_groups = function_exists('field_group_info_groups') ? field_group_info_groups() : array();

      // Fields.
      $field_options = $instances = array();
      $selected_bundles = $form_state['page_values'][1]['bundles'];
      foreach ($selected_bundles as $key => $bundle) {
        if ($key === $bundle) {
          $instances += field_info_instances($entity_type, $bundle);
        }
      }

      foreach ($instances as $key => $info) {
        $field_options[$key]['field'] = $info['label'];
      }

      $form['fields-info'] = array(
        '#markup' => t('Select fields you want to export.'),
      );
      $form['fields'] = array(
        '#type' => 'tableselect',
        '#header' => array('field' => t('Field name')),
        '#options' => $field_options,
        '#empty' => t('No fields found.'),
      );

      // Field group support - currently only form.
      if (!empty($all_groups)) {
        $group_options = $fieldgroups = array();
        if (isset($all_groups[$entity_type])) {
          foreach ($selected_bundles as $key => $bundle) {
            if ($key === $bundle) {
              foreach ($all_groups[$entity_type][$key] as $view_mode => $groups) {
                foreach ($groups as $field_group) {
                  $group_options[$field_group->id]['fieldgroup'] = $field_group->label;
                  $fieldgroups[$field_group->id] = $field_group;
                }
              }
            }
          }
        }
        if (!empty($group_options)) {
          $form['fieldgroups-info'] = array(
            '#markup' => t('Select field groups you want to export.'),
          );
          $form['fieldgroups'] = array(
            '#type' => 'tableselect',
            '#header' => array('fieldgroup' => t('Field group name')),
            '#options' => $group_options,
          );
          $form['fieldgroups-full'] = array(
            '#type' => 'value',
            '#value' => $fieldgroups,
          );
        }
      }

      $form['actions'] = array('#type' => 'actions');
      $form['actions']['next'] = array(
        '#type' => 'submit',
        '#value' => t('Export'),
      );
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'admin/structure/types/export'),
      );

      break;

    // Export data.
    case 3:

      $data = _bundle_copy_export_data($entity_type, $form_state['page_values']);

      $form['export'] = array(
        '#title' => t('Export data'),
        '#type' => 'textarea',
        '#cols' => 60,
        '#value' => $data,
        '#rows' => 40,
        '#description' => t('Copy the export text and paste it into another bundle using the import function.'),
      );
      break;
  }

  return $form;
}

/**
 * Submit callback: export data.
 */
function bundle_copy_export_submit($form, &$form_state) {

  // Save the form state values.
  $step = $form_state['step'];
  $form_state['page_values'][$step] = $form_state['values'];

  // Add step and rebuild.
  $form_state['step'] = $form_state['step'] + 1;
  $form_state['rebuild'] = TRUE;
}

/**
 * Menu callback: present the import page.
 */
function bundle_copy_import($form, $form_state, $entity_type = 'node') {

  $form['entity_type'] = array('#type' => 'value', '#value' => $entity_type);

  $form['info'] = array(
    '#markup' => t('This form will import bundle and field definitions.'),
  );

  /*$form['type_name'] = array(
    '#title' => t('Bundle'),
    '#description' => t('Select the bundle to import these fields into.<br/>Select &lt;Create&gt; to create a new bundle to contain the fields.'),
    '#type' => 'select',
    '#options' => array('<create>' => t('<Create>')) + _bundle_copy_bundle_info($entity_type),
  );*/

  $form['macro'] = array(
    '#type' => 'textarea',
    '#rows' => 10,
    '#title' => t('Import data'),
    '#required' => TRUE,
    '#description' => t('Paste the text created by a bundle export into this field.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );

  return $form;
}

/**
 * Submit callback: import data.
 */
function bundle_copy_import_submit($form, &$form_state) {

  // Evaluate data.
  eval($form_state['values']['macro']);

  if (isset($data) && is_array($data)) {

    $modules = module_list();
    $existing_bundles = _bundle_copy_bundle_info('node');

    // Create content types.
    foreach ($data['bundles'] as $key => $bundle) {
      if (!isset($existing_bundles[$key])) {
        drupal_set_message(t('%bundle bundle has been created.', array('%bundle' => $bundle->name)));
      }
      else {
        drupal_set_message(t('%bundle bundle has been updated.', array('%bundle' => $bundle->name)));
      }
      node_type_save($bundle);
    }

    // Create or update fields and their instances
    if (isset($data['fields'])) {
      foreach ($data['fields'] as $key => $field) {

        // Check if the field module exists.
        $module = $field['module'];
        if (!isset($modules[$module])) {
          drupal_set_message(t('%field_name field could not be created because the module %module is disabled or missing.', array('%field_name' => $key, '%module' => $module)), 'error');
          continue;
        }

        if (isset($data['instances'][$key])) {

          // Create or update field.
          $prior_field = field_read_field($field['field_name'], array('include_inactive' => TRUE));
          if (!$prior_field) {
            field_create_field($field);
            drupal_set_message(t('%field_name field has been created.', array('%field_name' => $key)));
          }
          else {
            $field['id'] = $prior_field['id'];
            field_update_field($field);
            drupal_set_message(t('%field_name field has been updated.', array('%field_name' => $key)));
          }

          // Create or update field instances.
          foreach ($data['instances'][$key] as $ikey => $instance) {

            // Make sure the needed key exists.
            if (!isset($instance['field_name'])) {
              continue;
            }

            $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
            if (!$prior_instance) {
              field_create_instance($instance);
              drupal_set_message(t('%field_name instance has been created for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
            else {
              $instance['id'] = $prior_instance['id'];
              $instance['field_id'] = $prior_instance['field_id'];
              field_update_instance($instance);
              drupal_set_message(t('%field_name instance has been updated for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
          }
        }
      }
    }


    // Create / update fieldgroups.
    if (isset($data['fieldgroups']) && module_exists('field_group')) {
      ctools_include('export');
      $existing_field_groups = field_group_info_groups();
      foreach ($data['fieldgroups'] as $identifier => $fieldgroup) {
        // @todo for some freaking reason, the update triggers a segfault on my machine
        // so let's delete first :/
        /*if (isset($existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->identifier])) {
          drupal_set_message(t('!fieldgroup field group has been updated for !bundle in !entity_type', array('!fieldgroup' => $fieldgroup->label, '!bundle' => $fieldgroup->bundle, '!entity_type' => $fieldgroup->entity_type)));
        }
        else {*/
          unset($fieldgroup->id);
          unset($fieldgroup->export_type);
          field_group_group_export_delete($fieldgroup);
          drupal_set_message(t('%fieldgroup field group has been saved for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
        //}
          field_group_pack($fieldgroup);
          drupal_write_record('field_group', $fieldgroup);
        }
    }
    else {
      drupal_set_message(t('The field groups could not be saved because the <em>Field group</em> module is disabled or missing.'));
    }

    // Clear caches.
    field_info_cache_clear();
    if (module_exists('field_group')) {
      cache_clear_all('field_groups', 'cache_field');
    }
  }
  else {
    drupal_set_message(t('No data has been imported'));
  }
}

/**
 * Return bundles for a certain entity type.
 *
 * @param $entity_type
 *   The name of the entity type.
 * @param $table_select
 *   Whether we're returning for the table select or not.
 */
function _bundle_copy_bundle_info($entity_type, $table_select = FALSE) {
  $bundles = array();
  $entity_info = entity_get_info($entity_type);
  foreach ($entity_info['bundles'] as $key => $info) {
    if ($table_select) {
      $bundles[$key]['label'] = $info['label'];
    }
    else {
      $bundles[$key] = $info['label'];
    }
  }
  return $bundles;
}

/**
 * Creates export data
 *
 * @param $entity_type
 *   The name of the entity_type
 * @param $selected_data
 *   The selected data.
 */
function _bundle_copy_export_data($entity_type, $selected_data) {

  ctools_include('export');

  $selected_bundles = $selected_data[1]['bundles'];
  $selected_fields = $selected_data[2]['fields'];
  $selected_fieldgroups = isset($selected_data[2]['fieldgroups']) ? $selected_data[2]['fieldgroups'] : array();
  $full_fieldgroups = isset($selected_data[2]['fieldgroups-full']) ? $selected_data[2]['fieldgroups-full'] : array();

  $data = array();
  $fields = field_info_fields();
  foreach ($selected_bundles as $bkey => $binfo) {

    $field_instances = field_info_instances($entity_type, $bkey);

    if ($bkey !== $binfo) {
      continue;
    }

    // Bundles export data.
    $node_info = node_type_get_type($bkey);
    $data['bundles'][$bkey] = $node_info;

    // Fields export data.
    foreach ($selected_fields as $fkey => $finfo) {
      if ($fkey === $finfo) {

        if (!isset($data['fields'][$fkey])) {
          $data['fields'][$fkey] = $fields[$fkey];
        }

        if (isset($field_instances[$fkey])) {
          $data['instances'][$fkey][] = $field_instances[$fkey];
        }
      }
    }
  }

  // Field group export data.
  if (!empty($selected_fieldgroups)) {
    foreach ($selected_fieldgroups as $key => $value) {
      if ($value !== 0) {
        $data['fieldgroups'][$full_fieldgroups[$key]->identifier] = $full_fieldgroups[$key];
      }
    }
  }

  return '$data = ' . ctools_var_export($data) . ';';
}
